{"hash":"53b234ddcd800ef7daaea8ec2d6f38939c763a01","data":{"thisPage":{"id":"9830708d55033129de4ce3da2269117b","name":"OperationTwo","mockData":"{\"Kubernetes 오브젝트 모델\":\"Taka\"}","source":"<template>\r\n    <div>\r\n        <div style = \"height:30px; width:100%; margin-top:20px;\">\r\n                <VueSubLayoutCard lab=\"ops-kubernetes-professional\"></VueSubLayoutCard>\r\n        </div>\r\n        <mark-down class=\"content\">\r\n## Kubernetes 오브젝트 모델\r\n- Kubernetes Core Concept : \"Desired State\"\r\n    - Kubernetes는 Current State을 모니터링하면서, Desired State를 유지하려는 습성을 가지고 있습니다.\r\n    - 직접적인 동작을 명령하지 않고, 원하는 상태를 선언(Not Imperative, But Declarative)\r\n        - Imperative – \"nginx 컨테이너를 3개 실행해주세요, 그리고 80포트로 오픈해주세요\"\r\n        - Declarative – \"80포트를 오픈한 채로, nginx 컨테이너를 3개 유지해주세요\"\r\n- Kubernetes Object, Controller and Kubectl\r\n    - Object : K8s의 상태를 나타내는 엔티티로 K8s API의 Endpoint\r\n        - 유형 - Pod, Service, Volume, Namespace 등이 있습니다.\r\n        - Spec과 Status 필드를 가짐 - Spec(Desired State), Status(Current State)\r\n\r\n    - Controller : Object의 Status를 갱신하고, Object를 Spec에 정의된 상태로 지속적으로 변화시켜 주는 주체입니다.\r\n        - 유형 – ReplicaSet, Deployment, StatefulSets, DaemonSet, Cronjob 등\r\n\r\n    - Kubectl : Command CLI에서 Object와 Controller를 제어하는 K8s Client\r\n        - 발음하기 – \"큐브시티엘\", \"쿠베시티엘\"\r\n\r\n### Pod ; Kubernetes 최소 배포 단위\r\n  - Pod : 미국식 [pɑːd], 영국식 [pɒd]\r\n      - “물고기, 고래” 작은 떼 (Docker의 심볼이 고래 모양에서 유래)\r\n      - 발음하기 : “팟”, “파드“, “포드”\r\n        </mark-down>\r\n       \r\n        <g-image style=\"max-width: 80%\"\r\n            src=\"~/img/03_Bizdevops/06_운영/02/image1.png\"\r\n        ></g-image>\r\n<mark-down class=\"content\">\r\n### Kubernetes Object Model\r\n  - apiVersion : 해당 Object description 을 해석할 수 있는 API server 의 버전\r\n  - kind : 오브젝트의 타입 – 예제는 Deployment \r\n  - metadata : 객체의 기본 정보. 예) 이름 \r\n  - spec (spec and spec.template.spec) : 원하는 ”Desired State” 의 세부 내역입니다. \r\n    예제에서는 3개의 replica를 template 내의 pod 정의대로 찍어내어 유지하라는 desired state 설정입니다.\r\n  - spec.template.spec : defines the desired state of the Pod. The example Pod would be created using nginx:1.7.9.\r\n  - Once the object is created, the Kubernetes system attaches the status field to the object\r\n      </mark-down>\r\n        <g-image style=\"max-width: 30%\"  \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image2.png\"\r\n        ></g-image>\r\n        <mark-down class=\"content\">\r\n#### Declaration based configuration\r\n        </mark-down>\r\n        <g-image style=\"max-width: 80%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image3.png\"\r\n        ></g-image>\r\n        <mark-down class=\"content\">\r\n### Labels\r\n  - Labels 은 객체 식별 정보로서 Kubernetes 객체라면 모두 붙일 수 있습니다.\r\n  - Label들은 요구사항에 맞춰 개체의 하위 집합을 구성하고 선택하는데 사용됩니다.\r\n  - Label들은 객체에 고유성을 제공하지 않아, 여러 객체들은 같은 label을 가질 수 있습니다.\r\n#### Label Selectors\r\n  - Label Selectors들은 객체들의 집합을 선택하며, kubernetes는 2가지 종류를 지원합니다.\r\n      - Equality-Based Selectors \r\n          Uses the =, ==, != 연산자를 이용하여 Label key와 value 값을 기반으로 객체들을 필터링 할 수 있습니다. \r\n      - Set-Based Selectors\r\n          in, notin, exist 연산자를 사용하며, value 값들을 기반으로 객체들을 선택할 수 있습니다. \r\n#### Annotations\r\n  - Label 처럼 식별 정보는 아닌 임의의 비 식별 메타데이터를 객체에 key-value 형태로 추가합니다.\r\n      ```\r\n      \"annotations\": {\r\n        \"key1\" : \"value1\",\r\n        \"key2\" : \"value2\"\r\n      }\r\n      ```\r\n\r\n  - 주로, 히스토리, 스케줄 정책, 부가 정보 등을 기술\r\n  - 배포 주석을 추가해 서비스를 Deploy하고, 이전 서비스로 롤백 시, 해당 정보를 활용해 롤백해줍니다.\r\n      ```\r\n      apiVersion: apps/v1\r\n      kind: Deployment\r\n      metadata:\r\n        name: nginx-deployment\r\n        labels:\r\n          app: nginx\r\n        annotataions:\r\n          kubernetes.io/change-cause=nginx:1.7.9\r\n      spec:\r\n        replicas: 3\r\n        selector:\r\n          ………………………..\r\n      ```\r\n\r\n#### One-dash, Double-dash\r\n  - Generally, in Command Options\r\n      - Some have a long form without a short form ( -- author, --block-size)\r\n      - Some have a short form without a long form (-c, -f, -g)\r\n      - Some have both a long form and a short form (-A / --almost-all, -b / --escape)\r\n  - In Pod Selector,  short form ( -l ) equals long form( --selector )\r\n\r\n#### Replication Controllers\r\n  - Master node의 Controller Manager 중 하나입니다.\r\n  - Pod의 복제품이 주어진 개수(Desired State)만큼 작동하고 있는지 확인하고 개수를 조절합니다.\r\n  - Replication Controller는 Pod를 생성하고 관리합니다.\r\n      > 일반적으로 Pod는 자기 복구가 불가능 하기에 단독으로 배포를 하지 않습니다.\r\n\r\n### ReplicaSets\r\n  - ReplicaSet(rs)은 Replication Controller의 업그레이드 버전입니다.\r\n  - ReplicaSet은 equal 및 set 기반 Selector를 모두 지원하는 반면,\r\n    Replication Controller는 equal기반 Selector만 지원합니다.\r\n</mark-down>\r\n        <g-image style=\"max-width: 50%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image4.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n  - 지정된 수의 Pod (Desired State)가 항상 실행되도록 보장합니다.\r\n  - ReplicaSets은 단독으로도 사용 가능하지만, 주로 Pod Orchestration에 사용(Pod creation, deletion, updates) \r\n  - Deployment가 ReplicaSets을 자동 생성하기 때문에 사용자는 관리에 신경 쓰지 않아도 됩니다.\r\n    </mark-down>\r\n        <g-image style=\"max-width: 50%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image5.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n### Deployments\r\n  - Deployment 객체는 Pods와 ReplicaSets에 대한 선언적 업데이트를 제공합니다.\r\n  - Deployment Controller는 Master node 컨트롤 관리자의 일부로 Desired state가 항상 만족이 되는지 확인합니다.\r\n  - Deployment 가 ReplicaSet을 만들고 ReplicaSet은 그 뒤에 주어진 조건만큼의 Pod들을 생성합니다.\r\n</mark-down>\r\n        <g-image style=\"max-width: 50%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image6.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n- Deployment의 Pod template이 바뀌게 되면, 새로운 ReplicaSet이 생성되는데, 이를 Deployment rollout이라고 합니다.\r\n- Rollout은 Pod template에 변동이 생겼을 경우에만 동작하며, Scaling등의 작업은 ReplicaSet을 새로 생성하지 않습니다.\r\n    </mark-down>\r\n        <g-image style=\"max-width: 80%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image7.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n- 새로운 ReplicaSet이 준비되면 Deployment는 새로운 ReplicaSet을 바라봅니다.\r\n- Deployment들은 Deployment recording등의 rollback 기능을 제공하며, 문제가 발생했을 경우, 이전 단계로 돌릴 수 있습니다.\r\n</mark-down>\r\n        <g-image style=\"max-width: 50%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image8.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n#### Deployment 생성\r\n  - 설정 파일을 생성\r\n      - nano nginx-deployment.yaml\r\n  - 파일을 기반을 배포\r\n      - kubectl create -f nginx-deployment.yaml\r\n  - 생성된 deployment 확인\r\n      - kubectl describe deployment nginx-deployment\r\n\r\n#### Scaling Deployments\r\n  - Deployment의 replica의 개수를 확인\r\n      - kubectl get pods\r\n  - Deployment의 이름을 복사\r\n      - kubectl get deployments\r\n  - 해당 Deployment의 scale 조정\r\n      - kubectl scale deployments [deployment 이름] --replicas=3\r\n  - 변경을 확인 \r\n      - kubectl get pods\r\n\r\n#### Deployments 의 변경\r\n  - Deployment 파일을 변경\r\n      - kubectl get deployments \r\n      - nano nginx-deployment.yaml\r\n          - ( spec 아래 항목에 replicas: 5 속성 추가; 있으면 수정)\r\n  - 변경한 파일을 적용\r\n      - kubectl apply -f nginx-deployment.yaml\r\n  - 변경 내용을 확인\r\n      - kubectl get pods\r\n  - 설정파일에 추가된 replicas 속성을 삭제 후 다시 적용\r\n      - Nano nginx-deployment.yaml (replicas) \r\n      - kubectl apply -f nginx-deployment.yaml\r\n      - kubectl delete pods --all\r\n      - kubectl get pods\r\n\r\n#### Rolling update\r\n  - 작동중인 pod와 deployments 확인\r\n      - kubectl get pods \r\n      - kubectl get deployments\r\n\r\n  - 새로운 버전의 deployments 배포 및 배포 상태 확인\r\n      - kubectl apply -f nginx-deployment.yaml\r\n      - kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1\r\n      - kubectl rollout status deployment/nginx-deployment\r\n\r\n  - 변경 확인\r\n      - kubectl get deployments \r\n      - kubectl get pods \r\n      - kubectl describe pods [pod 이름]\r\n\r\n  - Pod에 접속하여 확인\r\n      - kubectl exec -it podname -- /bin/bash \r\n      - apt-get update \r\n      - apt-get install curl \r\n      - curl localhost\r\n#### Rollback\r\n  - 현재 실행중인 객체들을 확인\r\n      - kubectl get pods\r\n      - kubectl get deployments -o wide     \t\r\n          > deployment에 적용된 Image:버전 추가 표시\r\n\r\n  - 객체를 롤백 처리\r\n      - kubectl rollout undo deployment/nginx-deployment\r\n\r\n  - 진행을 확인\r\n      - kubectl get deployments -o wide\r\n\r\n#### Namespaces\r\n  - Kubernetes는 동일 물리 클러스터를 기반으로 하는 복수의 가상 클러스터를 지원하는데 이들 가상 클러스터를  Namespace라고 합니다.\r\n  - Namespace를 활용하면, 팀이나 프로젝트 단위로 클러스터 파티션을 나눌 수 있습니다.\r\n  - Namespace 내에 생성된 자원/객체는 고유하나, Namespace사이에는 중복이 발생할 수 있습니다.\r\n  - Namespaces Object 조회\r\n      - Kubernetes는 처음에 3개의 초기 네임스페이스를 가집니다.\r\n      ```\r\n      $ kubectl get namespaces\r\n      NAME            STATUS       AGE\r\n      default         Active       11h\r\n      kube-public     Active       11h\r\n      kube-system     Active       11h\r\n      ```\r\n      - default  : 다른 namespace를 갖는 다른 객체들을 가지고 있습니다.\r\n      - kube-public 은 클러스터 bootstrapping 같은 모든 유저가 사용가능한 특별한 namespace 입니다.\r\n      - kube-system: Kubernetes system에 의해서 생성된 객체를 가지고 있습니다.\r\n      - Resource Quotas를 사용하여 namespace 내에 존재하는 자원들을 나눌 수 있습니다.\r\n\r\n#### Pod Access Issues\r\n  - 어플리케이션에 접근하기 위해서는, 사용자가 Pod에 접근해야 합니다.\r\n  - Pod들은 언제든지 소멸 가능하기에 IP주소는 고정되어 있지 않습니다.\r\n  - 사용자가 직접 IP주소로 Pod에 연결되어 있을 때, Pod가 죽어서 새로 만들어지면 접속할 방법이 없습니다.\r\n  - 이 상황을 극복하기 위해서 추상화를 통해 Service라는 Pod들의 논리적 집단을 만들어 규칙을 설정하고 사용자들은 여기에 접속을 합니다.\r\n</mark-down>\r\n        <g-image style=\"max-width: 90%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image9.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n\r\n\r\n### Services\r\n  - Selector를 사용하여 Pod를 논리적 그룹으로 나눌 수 있습니다.\r\n  - 각 논리적 그룹에 대해서 Service name이라는 이름을 부여할 수 있습니다.\r\n  - 사용자는 Service IP주소를 통해 Pod에  접속하게 됩니다.\r\n  - 각 Service에 부여된 IP는 클러스터 IP 라고도 부릅니다.\r\n  - Service는 각 Pod에 대해 Load balancing을 자동으로 수행\r\n</mark-down>\r\n        <g-image style=\"max-width: 70%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image10.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n\r\n#### kube-proxy\r\n  - 모든 Worker node들은 kube-proxy라는 데몬을 실행하며,\r\n    이 데몬은 Service 및 End-point 생성 /삭제를 위해 마스터 노드의 API 서버를 모니터링합니다.\r\n  - 각 node에 있는 모든 새로운 Service에 대해서 kube-proxy는 Iptable 규칙을 구성하여,\r\n    ClusterIP의 트래픽을 캡처하고 이를 End-point로 보냅니다.\r\n  - Service가 제거되면, kube-proxy는 노드상의 Iptables 규칙도 지웁니다.\r\n    </mark-down>\r\n        <g-image style=\"max-width: 80%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image11.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n\r\n#### Service Discovery\r\n  - Service는 클라이언트가 애플리케이션에 접근하는 Kubernetes의 채널로 런타임시, 이를 검색할 수 있는 방법이 필요합니다.\r\n  - DNS를 이용하는 방법입니다.\r\n      > 서비스는 생성되면, [서비스 명].[네임스페이스명].svc.cluster.local이라는 DNS명으로 쿠버네티스 내부 DNS에 등록되고, \r\n        쿠버네티스 내부 클러스터에서는 이 DNS명으로 접근 가능한데,\r\n        이 때 DNS에서 리턴해 주는 IP는 외부 IP(External IP)가 아니라 Cluster IP(내부 IP) 입니다.\r\n  \r\n  - External IP를 명시적으로 지정하는 방법입니다.\r\n      > 외부 IP는 Service의 Spec 부분에서 externalIPs 항목의 Value로 기술합니다.\r\n\r\n#### ServiceType\r\n  - Service를 정의할 때 Access Scope를 따로 정할 수 있습니다.\r\n      - 클러스터 내에서만 접근이 가능합니까?\r\n      - 클러스터 내와 외부에서 접근이 가능합니까?\r\n      - 클러스터 밖의 리소스에 대한 Map을 가지고 있습니까?\r\n\r\n  - Service 생성 시, IP주소 할당 방식과 서비스 연계 등에 따라 4가지로 구분합니다.\r\n      - ClusterIP\r\n      - NodePort\r\n      - LoadBalancer\r\n      - ExternalName\r\n\r\n#### ServiceType : ClusterIP\r\n  - 디폴트 설정으로 서비스에 클러스터 ip를 할당 \r\n  - 쿠버네티스 클러스터 내에서만 이 서비스에 접근 가능\r\n  - 외부에서는 외부 IP를 할당 받지 못했기 때문에 접근이 불가능  \r\n  \r\n#### ServiceType : NodePort\r\n  - 고정 포트(NodePort)로 각 노드의 IP에 서비스를 노출\r\n  - Cluster IP 뿐만 아니라, 노드의 IP와 포트를 통해서도 &#40;&#60; NodeIP &#62;:&#60; NodePort &#62;&#41; 접근 가능\r\n  </mark-down>\r\n        <g-image style=\"max-width: 70%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image12.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n```\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: hello-node-svc\r\nspec:\r\n  selector:\r\n    app: hello-node\r\n  type: NodePort\r\n  ports:\r\n    - name: http\r\n      port: 80\r\n      protocol: TCP\r\n      targetPort: 8080\r\n      nodePort: 30036\r\n```\r\n</mark-down>\r\n        <g-image style=\"max-width: 50%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image13.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n#### ServiceType : LoadBalancer\r\n  - 클라우드 밴더의 로드밸런싱 기능을 사용\r\n      - NodePort와 ClusterIP Service들은 자동으로 생성되어 External Load Balancer가 해당 포트로 라우팅\r\n      - Service들은 각 Worker node에서 Static port로 노출\r\n  - LoadBalancer ServiceType은 기본 인프라가 Load balancer의 자동 생성을 제공하고, Kubernetes를 지원 할 경우에만 작동\r\n      > Ex) Azure, Google Cloud Platform, AWS \r\n</mark-down>\r\n        <g-image style=\"max-width: 80%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image14.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n#### ServiceType: ExternalName\r\n  - 외부 서비스를 쿠버네티스 내부에서 호출할 때 사용\r\n  - 쿠버네티스 클러스터내의 Pod들은 클러스터 IP를 가지고 있기 때문에 클러스터 IP 대역 밖의 서비스를 호출하고자 하면,\r\n    NAT 설정등 복잡한 설정이 필요합니다.\r\n  - Azure, AWS 나 GCP와 같은 클라우드 환경에서 DBMS나, 또는 클라우드에서 제공되는 매지니드 서비스 (RDS, CloudSQL)등을 사용하고자 할 경우\r\n      - 쿠버네티스 클러스터 외부이기에 호출이 어려운 경우가 있는데, 이를 쉽게 해결할 수 있는 방법이 ExternalName 타입입니다.\r\n\r\n    ```\r\n    apiVersion: v1\r\n    kind: Service\r\n    metadata:\r\n      name: my-service\r\n      namespace: prod\r\n    spec:\r\n      type: ExternalName\r\n      externalName: my.database.example.com\r\n    ```\r\n    - 서비스를 ExternalName 타입으로 설정하고, 주소를 my.database.example.com으로\r\n      설정해주면 이 my-service는 들어오는 모든 요청을 my.database.example.com 으로 포워딩 \r\n    - 일종의 프록시와 같은 역할\r\n    </mark-down>\r\n        <g-image style=\"max-width: 25%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image15.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n### Volumes\r\n  - 쿠버네티스는 여러 호스트에 걸처 Stateless한 컨테이너를 마이크로서비스로 \r\n    배포하는 것이 목표이기에 영속성 있는 저장장치(Persistent Volume)를 고려해야 합니다.\r\n  - Volume은 Pod에 장착되어, 그 Pod에 있는 Container 간에 공유\r\n</mark-down>\r\n        <g-image style=\"max-width: 40%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image16.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\">\r\n\r\n#### Types of Volumes\r\n  - Pod에 마운트된 디스크는 Volume Type에 따라 사용 유형이 정의\r\n  - Volume Type 內 디스크의 크기, 내용 등의 속성 설정\r\n  - Types of Volumes\r\n</mark-down>\r\n        <g-image style=\"max-width: 60%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image17.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n#### Volumes : emptyDir\r\n  ```\r\n  apiVersion: v1\r\n  kind: Pod\r\n  metadata:\r\n    name: shared-volumes\r\n  spec:\r\n    containers:\r\n    - image: redis\r\n      name: redis\r\n      volumeMounts:\r\n      - name: shared-storage\r\n        mountPath: /data/shared\r\n    - image: nginx\r\n      name: nginx\r\n      volumeMounts:\r\n      - name: shared-storage\r\n      mountPath: /data/shared\r\n    volumes:\r\n    - name: shared-storage\r\n      emptyDir: {}\r\n  ```\r\n  - emptyDir의 생명주기는 컨테이너 단위가 아닌 Pod 단위로 Container 재기동에도 계속 사용 가능합니다.\r\n  - 생성된 Pod 확인\r\n  - 지정 컨테이너 접속 후, 파일 생성\r\n      - kubectl exec -it shared-volumes --container redis -- /bin/bash\r\n      - cd /data/shared\r\n      - echo test… > test.txt\r\n\r\n  - 다른 컨테이너로 접속 후, 파일 확인\r\n      - kubectl exec -it shared-volumes --container nginx -- /bin/bash\r\n      - cd /data/shared\r\n      - ls\r\n</mark-down>\r\n        <g-image style=\"max-width: 90%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image18.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n#### Volumes : hostPath\r\n  ```\r\n  apiVersion: v1\r\n  kind: Pod\r\n  metadata:\r\n    name: hostpath\r\n  spec:\r\n    containers:\r\n    - name: redis\r\n      image: redis\r\n      volumeMounts:\r\n      - name: somepath\r\n        mountPath: /data/shared\r\n  volumes:\r\n  - name : somepath\r\n    hostPath:\r\n      path: /tmp\r\n      type: Directory\r\n  ```\r\n  - Node의 Local 디스크 경로를 Pod에 마운트\r\n  - 같은 hostPath에 있는 볼륨은 여러 Pod사이에서 공유\r\n  - Pod가 삭제되어도 hostPath에 있는 파일은 유지\r\n  - Pod가 재기동 되어 다른 Node에서 기동될 경우, 새로운 Node의 hostPath를 사용\r\n  - Node의 로그 파일을 읽는 로그 에이전트 컨테이너 등에 사용가능\r\n  - Pod 생성 및 확인 (Pod 내, ls -al /data/shared) \r\n    </mark-down>\r\n        <g-image style=\"max-width: 90%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image19.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n#### Volumes example : gitRepo\r\n  ```\r\n  apiVersion: v1\r\n  kind: Pod\r\n  metadata:\r\n    name: gitrepo-volume-pod\r\n  spec:\r\n    containers:\r\n    - image: nginx:alpine\r\n      name: web-server\r\n      volumeMounts:\r\n      - name: html\r\n        mountPath: /usr/share/nginx/html\r\n        readOnly: true\r\n      ports:\r\n      - containerPort: 80\r\n        protocol: TCP\r\n  volumes:\r\n  - name: html\r\n    gitRepo:\r\n      repository: \r\n  https://github.com/luksa/kubia-website-example.git\r\n      revision: master\r\n      directory: .\r\n  ```\r\n  - Pod 생성시 지정된 Git 리파지토리의 특정 리비전을 Cloning하여 디스크 볼륨 생성\r\n  - 물리적으로는 emptyDir이 생성되고 Git Clone 수행\r\n  - HTML 같은 정적 파일 및 Nodejs 같은 스크립트 기반 코드 배포에 유용\r\n</mark-down>\r\n        <g-image style=\"max-width: 70%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image20.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n#### PersistentVolume & PersistentVolumeClaim\r\n  - 특정 IT 환경에서는 영속성 있는 대용량 스토리지는 관리자에 의해 관리\r\n      - 쿠버네티스 클러스터를 사용하는 개발자로부터 볼륨 프로비저닝 역할을 분리하는 사상\r\n  - 시스템 관리자가 실제 물리 디스크를 생성한 뒤, 이 디스크를 PersistentVolume 이라는 이름으로 Kubernetes에 등록\r\n  - 개발자는 Pod 생성 시, 볼륨을 정의하고, 해당 볼륨의 정의 부분에 PVC(PersistentVolumeClaim)를 지정하여 관리자가 생성한 PV와 연결\r\n</mark-down>\r\n        <g-image style=\"max-width: 80%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image21.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n#### StorageClass - Dynamic PV Provisioning\r\n  - PV는 관리자에 의해 수동으로 생성될 수 있지만, 자동 생성도 가능(Dynamic Provisioning)\r\n  - StorageClass(SC) Object\r\n  - StorageClass 객체에 의해 PersistentVolumes 동적 제공 가능\r\n      - StorageClass는 PersistentVolume를 만들기 위해 Cloud Provider별 CSI 인터페이스를 구현하여 제공\r\n  - PersistentVolumes 스토리지 관리를 제공하는 Volume Types :\r\n      - GCEPersistentDisk, AWSElasticBlockStore, AzureDisk, NFS, iSCSI\r\n</mark-down>\r\n        <g-image style=\"max-width: 90%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image22.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n#### Azure StorageClass Object\r\n  - Azurefile : 파일 스토리지, 여러 노드 및 Pod간 데이터 공유 가능 \r\n  - Azurefile-premium : SSD 기반 고성능의 Low-Latency 디스크 지원\r\n  - default : 블록 스토리지, 표준 SSD Azure 디스크를 프로비저닝, 단일 Pod 에서만 사용 가능\r\n  - Managed-premium : Storage Class는 프리미엄 Azure Disk를 프로비저닝\r\n      - SSD 기반 고성능의 Low-Latency 디스크 지원\r\n      - 프로덕션 워크로드를 실행하는 VM에 완벽한 디스크\r\n</mark-down>\r\n        <g-image style=\"max-width: 80%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image23.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n#### PersistentVolumeClaims\r\n  - Pod가 크기, 접근 모드에 따라 PVC를 요청, 적합한 PersistentVolume 발견시 PersistentVolume Claim에 바인딩\r\n  - PVC 조건을 만족하는 PV가 없을 경우, PV를 StorageClass가 자동으로 Provisioning하여 바인딩\r\n    </mark-down>\r\n        <g-image style=\"max-width: 80%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image24.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n### ConfigMaps\r\n  - ConfigMaps는 컨테이너 이미지로부터 설정 정보를 분리할 수 있게 해줍니다.\r\n  - 환경변수나 설정값 들을 환경변수로 관리해 Pod가 생성될 때 이 값을 주입\r\n  - ConfigMaps은 2가지 방법으로 생성\r\n      - 리터럴 값\r\n      - 파일\r\n  - ConfigMaps는 etcd에 저장 \r\n    </mark-down>\r\n        <g-image style=\"max-width: 70%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image25.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n#### 리터럴 값으로부터 ConfigMap 생성\r\n  - ConfigMap을 생성하는 명령어\r\n  ```\r\n  $ kubectl create configmap my-config --from-literal=key1=value1 \r\n  --from-literal=key2=value2\r\n    configmap \"my-config\" created \r\n  ```\r\n  - 설정된 ConfigMap 정보 가져오기\r\n  ```\r\n  $ kubectl get configmaps my-config -o yaml\r\n    apiVersion: v1\r\n    data:\r\n      key1: value1\r\n      key2: value2\r\n    kind: ConfigMap\r\n    metadata:\r\n      creationTimestamp: 2017-05-31T07:21:55Z\r\n      name: my-config\r\n      namespace: default\r\n      resourceVersion: \"241345\"\r\n      selfLink: /api/v1/namespaces/default/configmaps/my-config\r\n      uid: d35f0a3d-45d1-11e7-9e62-080027a46057\r\n  ```\r\n  - o yaml 옵션은 해당 정보를 yaml형태로 출력하도록 요청합니다.\r\n  - 해당 객체는 종류가 ConfigMap이며 key-value 값을 가지고 있습니다.\r\n  - ConfigMap의 이름 등의 정보는 metadata field에 들어 있습니다.\r\n#### 파일로부터 ConfigMap 생성 (1/2)\r\n  - 아래와 같은 설정 파일을 만듭니다.\r\n  ```\r\n  apiVersion: v1\r\n  kind: ConfigMap\r\n  metadata:\r\n    name: customer1\r\n  data:\r\n    TEXT1: Customer1_Company\r\n    TEXT2: Welcomes You\r\n    COMPANY: Customer1 Company Technology Pct. Ltd.\r\n  ```\r\n  - customer1-configmap.yaml라는 이름으로 파일을 생성하였을 경우, 아래와 같이 ConfigMap를 생성합니다.\r\n  ```\r\n  $ kubectl create -f customer1-configmap.yaml\r\n    configmap \"customer1\" created\r\n  ```\r\n#### 파일로부터 ConfigMap 생성 (2/2)\r\n  - Userinfo.properties 파일을 생성하고, \r\n  ```\r\n  myname=apexacme\r\n  email=apexacme@uengine.org\r\n  Address=seoul\r\n  ```\r\n  - 파일을 이용해 ConfigMap을 만들 때는 --from-file을 이용해 파일명을 넘깁니다.\r\n  - kubectl create configmap cm-file --from-file=./properties/profile.properties\r\n      - 이때, 키는 파일명이 되고, 값은 파일 내용이 됩니다.\r\n        </mark-down>\r\n        <g-image style=\"max-width: 60%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image26.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n#### Containerizing with ConfigMap from Dockerizing\r\n  - Scenario\r\n      - ConfigMap 생성\r\n      - ConfigMap의 환경변수를 읽어 출력하는 NodeJS 어플리케이션 준비\r\n      - Dockerfile 생성\r\n      - Dockerizing & Azure Container Registry에 Push\r\n      - Deployment yaml, Service yaml 준비\r\n      - 배포 및 서비스 생성\r\n      - 브라우저를 통해 서비스 확인\r\n      - ConfigMap의 환경변수를 어플리케이션이 정상적으로 참조하여 출력하는지 여부\r\n      - ConfigMap 생성\r\n      ```\r\n      $ kubectl create configmap hello-cm --from-literal=language=java\r\n      $ kubectl get cm\r\n      $ kubectl get cm hello-cm -o yaml\r\n      ```\r\n      - ConfigMap의 환경변수를 읽어 출력하는 NodeJS 어플리케이션\r\n      ```\r\n      var os = require('os');\r\n      var http = require('http');\r\n      var handleRequest = function(request, response) {\r\n        response.writeHead(200);\r\n        response.end(\" my prefered language is \"+process.env.LANGUAGE+ \"\\n\");\r\n\r\n        //log\r\n        console.log(\"[\"+\r\n                    Date(Date.now()).toLocaleString()+\r\n                    \"] \"+os.hostname());\r\n      }\r\n      var www = http.createServer(handleRequest);\r\n      www.listen(8080);\r\n      ```\r\n      - Dockerfile 생성\r\n      ```\r\n      FROM node:carbon\r\n      EXPOSE 8080\r\n      COPY server.js .\r\n      CMD node server.js > log.out\r\n      ```\r\n      - Dockerizing & Azure Container Registry에 Push\r\n      ```\r\n      $ docker build -t (uengineorg).azurecr.io/cm-sandbox:v1 .\r\n      $ docker push (uengineorg).azurecr.io/cm-sandbox:v1\r\n      # 위 2 명령행을 아래 하나의 명령으로 수행 가능\r\n      $ az acr build --registry [acr-레지트스리명] --image [acr레지스트리명].azurecr.io/cm-sandbox:v1 .\r\n      ```\r\n      \r\n      - 인증 오류 발생시, 로그인 수행 : az acr login --name user35registry --expose-token\r\n      - Push 확인 : Azure Portal > 컨테이너 레지스터리 > 리파지토리\r\n      ```\r\n      apiVersion: apps/v1beta2\r\n      kind: Deployment\r\n      metadata:\r\n        name: cm-deployment\r\n      spec:\r\n        replicas: 1\r\n        minReadySeconds: 5\r\n        selector:\r\n          matchLabels:\r\n            app: cm-literal\r\n        template:\r\n          metadata:\r\n            name: cm-literal-pod\r\n            labels:\r\n              app: cm-literal\r\n          spec:\r\n            containers:\r\n            - name: cm\r\n              image: uengineorg.azurecr.io/cm-sandbox:v1\r\n              imagePullPolicy: Always\r\n              ports:\r\n              - containerPort: 8080\r\n              env:\r\n              - name: LANGUAGE\r\n                valueFrom:\r\n                  configMapKeyRef:\r\n                    name: hello-cm\r\n                    key: language\r\n      ```\r\n\r\n      - Deployment(cm-deployment.yaml) 생성/ 실행\r\n      - kubectl create -f cm-deployment.yaml\r\n      - $ kubectl get deploy\r\n      ```\r\n      apiVersion: v1\r\n      kind: Service\r\n      metadata:\r\n        name: cm-literal-svc\r\n      spec:\r\n        selector:\r\n          app: cm-literal\r\n      ports:\r\n        - name: http\r\n        port: 80\r\n        protocol: TCP\r\n        targetPort: 8080\r\n      type: LoadBalancer\r\n      ```\r\n      - Service(cm-service.yaml) 생성/ 실행\r\n      - $ kubectl create -f cm-service.yaml\r\n      - $ kubectl get svc\r\n\r\n      - 브라우저를 통해 서비스 확인\r\n        - Service의 External-IP 접속\r\n        </mark-down>\r\n        <g-image style=\"max-width: 60%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image27.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n#### 마이크로서비스 결과 확인\r\n</mark-down>\r\n        <g-image style=\"max-width: 70%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image28.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n#### Pod에서 ConfigMap 추가 사용하기\r\n  ```\r\n  apiVersion: apps/v1beta2\r\n  kind: Deployment\r\n  metadata:\r\n    name: cm-file-deployment\r\n  spec:\r\n    replicas: 3\r\n    minReadySeconds: 5\r\n    selector:\r\n      matchLabels:\r\n        app: cm-file\r\n    template:\r\n      metadata:\r\n        name: cm-file-pod\r\n        labels:\r\n          app: cm-file\r\n      spec:\r\n        containers:\r\n        - name: cm-file\r\n          image: uengineorg.azurecr.io/cm-file:v1\r\n          imagePullPolicy: Always\r\n          ports:\r\n          - containerPort: 8080\r\n          env:\r\n          - name: PROFILE\r\n            valueFrom:\r\n              configMapKeyRef:\r\n                name: cm-file\r\n                key: profile.properties\r\n  ```\r\n  - 환경변수로 값 전달\r\n      - cm-file configMap에서 키가 “profile.properties” (파일명)인 값을 읽어와서 환경 변수 PROFILE에 저장 \r\n      - 저장된 값은 파일의 내용인 아래 문자열이 됩니다.\r\n      - myname=terry\r\n      - email=myemail@mycompany.com\r\n      - address=seoul\r\n  ```\r\n  apiVersion: apps/v1beta2\r\n  kind: Deployment\r\n  metadata:\r\n    name: cm-file-deployment-vol\r\n  spec:\r\n    replicas: 3\r\n    minReadySeconds: 5\r\n    selector:\r\n      matchLabels:\r\n        app: cm-file-vol\r\n  template:\r\n    metadata:\r\n      name: cm-file-vol-pod\r\n      labels:\r\n        app: cm-file-vol\r\n  spec:\r\n    containers:\r\n      - name: cm-file-vol\r\n      image: uengineorg.azurecr.io /cm-file-volume:v1\r\n      imagePullPolicy: Always\r\n      ports:\r\n      - containerPort: 8080\r\n      volumeMounts:\r\n        - name: config-profile\r\n          mountPath: /tmp/config\r\n    volumes:\r\n      - name: config-profile\r\n        configMap:\r\n          name: cm-file\r\n  ```\r\n\r\n### Secrets\r\n  - ConfigMap이 일반적인 환경 설정 정보나 Config정보를 저장하도록 디자인 되었다면,\r\n    보안이 중요한 패스워드나 API 키, 인증서 파일들은 Secret에 저장합니다.\r\n\r\n  - Secret은 정보보안 차원에서 추가적인 보안 기능을 제공\r\n      - 예를 들어, API서버나 Node의 파일에 저장되지 않고, 항상 메모리에 저장되므로 상대적 접근이 어렵습니다.\r\n      - Secret의 최대 크기는 1MB (너무 커지면, apiserver나 Kubelet의 메모리에 부하 발생)\r\n\r\n  - ConfigMap과 기본적으로 유사하나, 값(value)에 해당하는 부분을 base64로 인코딩해야 합니다.\r\n      - SSL인증서와 같은 binary파일의 경우, 문자열 저장이 불가능하므로 인코딩이 필요합니다.\r\n      - 이를 환경변수로 넘길 때나 디스크볼륨으로 마운트해서 읽을 경우 디코딩 되어 적용합니다.\r\n  ```\r\n  apiVersion: v1\r\n  kind: Secret\r\n  metadata:\r\n    name: hello-secret\r\n  data:\r\n    language: amF2YQo=\r\n  ```\r\n\r\n  - Kubectl 명령어로 Secret 생성 및 확인\r\n    - 명령어로 Secret 만들기 \r\n        - $ kubectl create secret generic my-password --from-literal=password=mysqlpassword\r\n        - my-password라는 Secret을 생성하고, password 라는 key와 mysqlpassword라는 value 값을 가지게 됩니다.\r\n        - Value는 base64로 자동 encoding\r\n        - generic : create a secret from a local file, directory or literal value\r\n\r\n    - Secret 확인 : kubectl get secret my-password -o yaml\r\n        - echo [base64 value] | base64 --decode\r\n- Secret을 직접 만들기 \r\n    - base64 형태로 인코딩하여 YAML파일내에 직접 생성 가능\r\n    ```\r\n    $ echo mysqlpassword | base64\r\n      bXlzcWxwYXNzd29yZAo=\r\n    ```\r\n\r\n    - 위 방식으로 인코딩 된 정보를 사용해 설정파일 생성\r\n    ```\r\n    apiVersion: v1\r\n    kind: Secret\r\n    metadata:\r\n      name: my-password\r\n    type: Opaque\r\n    data:\r\n      password: bXlzcWxwYXNzd29yZAo=\r\n    ```\r\n\r\n    - base64 인코딩은 바로 디코딩 됨으로 주의해야 합니다!\r\n    ```Terminal\r\n    $ echo \"bXlzcWxwYXNzd29yZAo=\" | base64 --decode\r\n    ```\r\n\r\n    - 설정파일을 절대 소스코드에 넣지 않도록 주의해야 합니다!\r\n\r\n  - Pod에서 Secret 사용하기\r\n  ```yaml\r\n  apiVersion: apps/v1beta2\r\n  kind: Deployment\r\n  metadata:\r\n    name: hello-secret-deployment\r\n  spec:\r\n    replicas: 1\r\n    minReadySeconds: 5\r\n    selector:\r\n      matchLabels:\r\n        app: hello-secret-literal\r\n  template:\r\n    metadata:\r\n      name: hello-secret-literal-pod\r\n      labels:\r\n        app: hello-secret-literal\r\n      spec:\r\n        containers:\r\n        - name: hello-secret\r\n          image: uengineorg.azurecr.io/hello-secret:v1\r\n          imagePullPolicy: Always\r\n          ports:\r\n          - containerPort: 8080\r\n          env:\r\n          - name: LANGUAGE\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: hello-secret\r\n              key: language\r\n  ```    \r\n  \r\n  - Deployment.yaml 생성/ 실행\r\n  - kubectl create -f hello-secret-deployment.yaml\r\n  - $ kubectl get deploy\r\n#### Pod에서 Secret 파일 마운트 사용하기\r\n  - 사용자 id를 저장한 user.property파일과 비밀번호를 저장한 password.property 파일생성\r\n      - id file 내용 : $ cat user.property   $ admin\r\n      - password file 내용 : $ cat password.property  $ adminpassword\r\n  - Secret 생성\r\n      - kubectl create secret generic db-password --from-file=./user.property  --from-file=./password.property\r\n      - 생성된 secret은 user.property, password.property 파일명을 각각 key로 파일의 내용이 저장\r\n  - Secret을 읽어 출력할 어플리케이션 생성 : server.js\r\n  ```java\r\n  var os = require('os');\r\n  var fs = require('fs');\r\n  var http = require('http');\r\n  var handleRequest = function(request, response) {\r\n    fs.readFile('/tmp/db-password/user.property',function(err,userid){\r\n      response.writeHead(200);\r\n      response.write(\"user id  is \"+userid+\" \\n\");\r\n      fs.readFile('/tmp/db-password/password.property',function(err,password){\r\n        response.end(\" password is \"+password+ \"\\n\");\r\n      })\r\n    })\r\n    console.log(\"[\"+\r\n      Date(Date.now()).toLocaleString()+\"] \"+os.hostname());\r\n  }\r\n  var www = http.createServer(handleRequest);\r\n  www.listen(8080);\r\n  ```\r\n\r\n  - Dockerfile 생성\r\n  ```Terminal\r\n  FROM node:carbon\r\n  EXPOSE 8080\r\n  COPY server.js .\r\n  CMD node server.js > log.out\r\n  ```\r\n\r\n  - Dockerizing & Azure Container Registry에 Push\r\n  ```Terminal\r\n  $ docker build -t user35registry.azurecr.io/hello-secret-file:v1 .\r\n  $ docker push user35registry.azurecr.io/hello-secret-file:v1\r\n\r\n  # 위 2 명령행을 아래 하나의 명령으로 수행 가능\r\n  $ az acr build --registry [acr-레지트스리명] --image [acr레지스트리명].azurecr.io/ hello-secret-file:v1 .\r\n  ```\r\n\r\n  - 인증 오류 발생시, 로그인 수행 : az acr login --name user35registry --expose-token\r\n  - Push 확인 : Azure Portal > 컨테이너 레지스터리 > 리파지토리\r\n  ```yaml\r\n  apiVersion: apps/v1beta2\r\n  kind: Deployment\r\n  metadata:\r\n    name: hello-serect-file-deployment\r\n  spec:\r\n    replicas: 3\r\n    minReadySeconds: 5\r\n    selector:\r\n      matchLabels:\r\n        app: hello-secret-file\r\n    template:\r\n      metadata:\r\n        name: hello-secret-file\r\n        labels:\r\n          app: hello-secret-file\r\n      spec:\r\n        containers:\r\n        - name: hello-secret-file\r\n          image: uengineorg.azurecr.io/hello-secret-file:v1\r\n          imagePullPolicy: Always\r\n          ports:\r\n          - containerPort: 8080\r\n          volumeMounts:\r\n            - name: db-password\r\n              mountPath: \"/tmp/db-password\"\r\n              readOnly: true\r\n        volumes:\r\n        - name: db-password\r\n          secret:\r\n            secretName: db-password\r\n            defaultMode: 0600\r\n  ```\r\n\r\n  - Deployment(hello-secret-file-deployment.yaml) 생성/ 실행\r\n  - kubectl create -f hello-secret-file-deployment.yaml\r\n  - $ kubectl get deploy\r\n\r\n  ```yaml\r\n  apiVersion: v1\r\n  kind: Service\r\n  metadata:\r\n    name: hello-secret-file-service\r\n  spec:\r\n    selector:\r\n      app: hello-secret-file\r\n    ports:\r\n      - name: http\r\n        port: 80\r\n        protocol: TCP\r\n        targetPort: 8080\r\n    type: LoadBalancer\r\n  ```\r\n\r\n  - Service(hello-secret-file-service.yaml) 생성\r\n      > $ kubectl create -f hello-secret-file-service.yaml\r\n\r\n  - $ kubectl get svc\r\n  - 브라우저를 통해 서비스 확인\r\n      - Service의 External-IP 접속\r\n\r\n### Liveness Probes & Readiness Probes\r\n  - 쿠버네티스는 각 컨테이너의 상태를 주기적으로 체크(Health Check)해서, \r\n      - 문제가 있는 컨테이너를 자동으로 재시작하거나 또는 문제가 있는 컨테이너를 서비스에서 제외 합니다.\r\n  - Liveness와 Readiness Probes은 kubelet이 pod내에서 실행되는 어플리케이션의 health를 조정하기 때문에 매우 중요합니다.\r\n  \r\n  - Probe Types\r\n      - Liveness probe와 readiness probe는 컨테이너가 정상적인지 아닌지를 체크하는 방법으로 다음과 같이 3가지 방식을 제공합니다.\r\n          - Command probe\r\n          - HTTP probe\r\n          - TCP probe\r\n  - Liveness Probes\r\n      - Pod는 정상적으로 작동하지만 내부의 어플리케이션이 반응이 없다면, 컨테이너는 의미가 없습니다.\r\n          - 위와 같은 경우는 어플리케이션의 Deadlock 또는 메모리 과부화로 인해 발생할 수 있으며,\r\n            발생했을 경우 컨테이너를 다시 시작해야 합니다.\r\n      - Liveness probe는 Pod의 상태를 체크하다가, Pod의 상태가 비정상인 경우 kubelet을 통해서 재시작합니다.\r\n    </mark-down>\r\n        <g-image style=\"max-width: 80%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image29.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n\r\n#### Liveness Command probe\r\n  ```yaml\r\n  apiVersion: v1\r\n  kind: Pod\r\n  metadata:\r\n    labels:\r\n      test: liveness\r\n    name: liveness-exec\r\n  spec:\r\n    containers:\r\n    - name: liveness\r\n      image: k8s.gcr.io/busybox\r\n      args:\r\n      - /bin/sh\r\n      - -c\r\n      - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600\r\n      livenessProbe:\r\n        exec:\r\n          command:\r\n          - cat\r\n          - /tmp/healthy\r\n      initialDelaySeconds: 3\r\n      periodSeconds: 5\r\n  ```\r\n\r\n  - 왼쪽은 /tmp/healthy 파일이 존재하는지 확인하는 설정 파일입니다.\r\n  - periodSeconds 파라미터 값으로 5초마다 해당  파일이 있는지 조회합니다.\r\n  - initialDelaySeconds 파라미터는 kubelet이 첫 체크하기 전에 기다리는 시간을 설정합니다.\r\n  - 파일이 존재하지 않을 경우, 정상 작동에 문제가 있다고 판단되어 kubelet에 의해 자동으로 컨테이너가 재시작 됩니다.\r\n\r\n#### Liveness HTTP probe\r\n  - Kubelet이 HTTP GET 요청을 /healthz 로 보냅니다.\r\n  - 실패 했을 경우, kubelet이 자동으로 컨테이너를 재시작 합니다.\r\n  ```yaml\r\n  livenessProbe:\r\n    httpGet:\r\n      path: /healthz\r\n      port: 8080\r\n      httpHeaders:\r\n      - name: X-Custom-Header\r\n        value: Awesome\r\n    initialDelaySeconds: 3\r\n    periodSeconds: 3\r\n  ```\r\n\r\n  - Liveness TCP Probe\r\n      - kubelet은 TCP Liveness Probe를 통해, 지속적으로 어플리케이션이 실행중인 컨테이너의 TCP Socket을 열려고 합니다.\r\n      - 정상이 아닌 경우 컨테이너를 재시작 합니다.\r\n      ```yaml\r\n      livenessProbe:\r\n        tcpSocket:\r\n          port: 8080\r\n        initialDelaySeconds: 15\r\n        periodSeconds: 20\r\n      ```\r\n\r\n#### Readiness Probes\r\n  - Configuration을 로딩하거나, 많은 데이터를 로딩하거나, 외부 서비스를 호출하는 경우에는 일시적으로 서비스가 불가능한 상태가 될 수 있습니다.\r\n  - Readiness Probe를 사용하게 되면 주어진 조건이 만족할 경우, 서비스 라우팅하고, 응답이 없거나 실패한 경우, 서비스 목록에서 제외합니다.\r\n  ```yaml\r\n  readinessProbe:\r\n    exec:\r\n      command:\r\n      - cat\r\n      - /tmp/healthy\r\n    initialDelaySeconds: 5\r\n    periodSeconds: 5\r\n  ```\r\n\r\n</mark-down>\r\n        <g-image style=\"max-width: 70%\" \r\n            src=\"~/img/03_Bizdevops/06_운영/02/image30.png\"\r\n        ></g-image>\r\n    <mark-down class=\"content\"> \r\n\r\n#### Difference between Liveness and Readiness\r\n  - Liveness probe와 Readiness probe 차이점은 \r\n      - Liveness probe는 컨테이너의 상태가 비정상이라고 판단하면, \r\n          - 해당 Pod를 재시작하는데 반해, \r\n\r\n  - Readiness probe는 컨테이너가 비정상일 경우에는\r\n      - 해당 Pod를 사용할 수 없음으로 표시하고, 서비스등에서 제외합니다.\r\n  \r\n  - 주기적으로 체크하여, 정상일 경우 정상 서비스에 포함합니다.\r\n\r\n        </mark-down>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\n        // @group 02_06_03_true\r\nexport default {\r\n    name: \"OperationTwo\",\r\n    props: {\r\n        \"Kubernetes 오브젝트 모델\": {\r\n            type: String\r\n        }\r\n    }\r\n};\r\n</script>","path":"/operation/operation/operation-two/","props":[{"name":"Kubernetes 오브젝트 모델"}],"componentDesc":{"group":["02_06_03_true"]},"fileInfo":{"name":"OperationTwo","path":"operation/operation/OperationTwo.vue","directory":"operation/operation"}},"allPagesByName":{"edges":[{"node":{"id":"986c6ca74c7baaaf54586af6a3448b62","name":"index","path":"/operation/introduction/","props":[{"name":"교육과정 소개"}],"componentDesc":{"group":[]},"fileInfo":{"name":"index","path":"operation/introduction/index.vue","directory":"operation/introduction"}}},{"node":{"id":"d30151b21ae77ccf82989ee5d0e52c90","name":"CourseInfo","path":"/operation/introduction/schedule/","props":[{"name":"전체 교육과정 맵"}],"componentDesc":{"group":["01_01_02"]},"fileInfo":{"name":"schedule","path":"operation/introduction/schedule.vue","directory":"operation/introduction"}}},{"node":{"id":"6d8c00e551777464f2d24754b4ec89a6","name":"ai-curriculum","path":"/operation/introduction/ai-curriculum/","props":[{"name":"AI CNA & MSA 플립 과정"}],"componentDesc":{"group":["01_01_03"]},"fileInfo":{"name":"AI-Curriculum","path":"operation/introduction/AI-Curriculum.vue","directory":"operation/introduction"}}},{"node":{"id":"26dbe220bcef11fd88bba6ebc1384cc9","name":"fundamental","path":"/operation/introduction/fundamental/","props":[{"name":"Fundamental 과정"}],"componentDesc":{"group":["01_01_04"]},"fileInfo":{"name":"Fundamental","path":"operation/introduction/Fundamental.vue","directory":"operation/introduction"}}},{"node":{"id":"252d2f782e7ca6b4cabeda988c876cc3","name":"curriculum","path":"/operation/introduction/curriculum/","props":[{"name":"Intermediate 과정"}],"componentDesc":{"group":["01_01_05"]},"fileInfo":{"name":"Curriculum","path":"operation/introduction/Curriculum.vue","directory":"operation/introduction"}}},{"node":{"id":"0ded1c14cac09f90dbe358756b92f1f3","name":"quick-understanding-cna","path":"/operation/introduction/quick-understanding-cna/","props":[{"name":"┣ Quick Understanding"}],"componentDesc":{"group":["01_01_06"]},"fileInfo":{"name":"QuickUnderstandingCNA","path":"operation/introduction/QuickUnderstandingCNA.vue","directory":"operation/introduction"}}},{"node":{"id":"735e0925c5824b169502025473e3bb34","name":"flipped-learning4-days-cna-course","path":"/operation/introduction/flipped-learning4-days-cna-course/","props":[{"name":"┣ Flipped Learning"}],"componentDesc":{"group":["01_01_07"]},"fileInfo":{"name":"FlippedLearning4DaysCNACourse","path":"operation/introduction/FlippedLearning4DaysCNACourse.vue","directory":"operation/introduction"}}},{"node":{"id":"98c5f60d749d05322d4ae831260f4898","name":"standard-cna","path":"/operation/introduction/standard-cna/","props":[{"name":"┣ Standard Learning"}],"componentDesc":{"group":["01_01_08"]},"fileInfo":{"name":"StandardCNA","path":"operation/introduction/StandardCNA.vue","directory":"operation/introduction"}}},{"node":{"id":"66933d54c23984e606615cf6ec5b929a","name":"enterprise-full-day14-days-course","path":"/operation/introduction/enterprise-full-day14-days-course/","props":[{"name":"┗ Enterprise Full-day"}],"componentDesc":{"group":["01_01_09"]},"fileInfo":{"name":"EnterpriseFull-day14DaysCourse","path":"operation/introduction/EnterpriseFull-day14DaysCourse.vue","directory":"operation/introduction"}}},{"node":{"id":"c60eb22080d0a84226bc4d69fa5ac5ea","name":"advanced","path":"/operation/introduction/advanced/","props":[{"name":"Advanced 과정"}],"componentDesc":{"group":["01_01_10"]},"fileInfo":{"name":"Advanced","path":"operation/introduction/Advanced.vue","directory":"operation/introduction"}}},{"node":{"id":"4fba1868bdf4924d1178a4528bc93765","name":"one-point-lesson","path":"/operation/introduction/one-point-lesson/","props":[{"name":"MSA 컨설팅"}],"componentDesc":{"group":["01_01_11"]},"fileInfo":{"name":"OnePointLesson","path":"operation/introduction/OnePointLesson.vue","directory":"operation/introduction"}}},{"node":{"id":"98ae4b6ad6456be10dc0ab3c6ff225cc","name":"index","path":"/operation/planning/","props":[{"name":"계획"}],"componentDesc":{"group":["01_02_01"]},"fileInfo":{"name":"index","path":"operation/planning/index.vue","directory":"operation/planning"}}},{"node":{"id":"da2417142e3266598e5e4d5a2708ce07","name":"StepByStepGoal","path":"/operation/planning/step-by-step-goal/","props":[{"name":"단계별 수행목표"}],"componentDesc":{"group":["01_02_02"]},"fileInfo":{"name":"StepByStepGoal","path":"operation/planning/StepByStepGoal.vue","directory":"operation/planning"}}},{"node":{"id":"56e7ad9642d9561eb0da9d7f1f1b4ded","name":"SegmentationLevel","path":"/operation/planning/segmentation-level/","props":[{"name":"세분화 수준"}],"componentDesc":{"group":["01_02_03"]},"fileInfo":{"name":"SegmentationLevel","path":"operation/planning/SegmentationLevel.vue","directory":"operation/planning"}}},{"node":{"id":"55beae35a5e9c4d8959f507ab3bb7449","name":"AvatarPatten","path":"/operation/planning/avatar-patten/","props":[{"name":"구현 패턴"}],"componentDesc":{"group":["01_02_04"]},"fileInfo":{"name":"AvatarPatten","path":"operation/planning/AvatarPatten.vue","directory":"operation/planning"}}},{"node":{"id":"083a84f61b2c31457a05f232f9d4ba87","name":"Planning","path":"/operation/planning/planning/","props":[{"name":"최종목표 수립"}],"componentDesc":{"group":["01_02_05"]},"fileInfo":{"name":"Planning","path":"operation/planning/Planning.vue","directory":"operation/planning"}}},{"node":{"id":"983b9b344a8c28bc3900a749c2b42bee","name":"SystemSecurity","path":"/operation/planning/system-security/","props":[{"name":"시스템 보안"}],"componentDesc":{"group":["01_02_06"]},"fileInfo":{"name":"SystemSecurity","path":"operation/planning/SystemSecurity.vue","directory":"operation/planning"}}},{"node":{"id":"a53ba3751c1870bffe582c99a260914b","name":"PerformanceMeasures","path":"/operation/planning/performance-measures/","props":[{"name":"성능 확보 방안"}],"componentDesc":{"group":["01_02_07"]},"fileInfo":{"name":"PerformanceMeasures","path":"operation/planning/PerformanceMeasures.vue","directory":"operation/planning"}}},{"node":{"id":"e95ad5699c184d2c9970c3076e616ca0","name":"CloudIq","path":"/operation/planning/cloud-iq/","props":[{"name":"클라우드 네이티브 전환 가이드"}],"componentDesc":{"group":["01_02_08"]},"fileInfo":{"name":"CloudIq","path":"operation/planning/CloudIq.vue","directory":"operation/planning"}}},{"node":{"id":"bbca5c4a87be8db80f4228fb653910ce","name":"TestMeasures","path":"/operation/planning/test-measures/","props":[{"name":"테스트 방안"}],"componentDesc":{"group":["01_02_09_true"]},"fileInfo":{"name":"TestMeasures","path":"operation/planning/TestMeasures.vue","directory":"operation/planning"}}},{"node":{"id":"57abc0393560dd6a1304e253c707d7c8","name":"index","path":"/operation/analysis/","props":[{"name":"분석"}],"componentDesc":{"group":["02_01_01"]},"fileInfo":{"name":"index","path":"operation/analysis/index.vue","directory":"operation/analysis"}}},{"node":{"id":"4342b67778e9885378104a12cddf390c","name":"AnalysisOne","path":"/operation/analysis/analysis-one/","props":[{"name":"관심사 분리 필요성"}],"componentDesc":{"group":["02_01_02"]},"fileInfo":{"name":"AnalysisOne","path":"operation/analysis/AnalysisOne.vue","directory":"operation/analysis"}}},{"node":{"id":"2f4dee713141c97544c48c981105863b","name":"AnalysisTwo","path":"/operation/analysis/analysis-two/","props":[{"name":"애자일 필요성"}],"componentDesc":{"group":["02_01_03"]},"fileInfo":{"name":"AnalysisTwo","path":"operation/analysis/AnalysisTwo.vue","directory":"operation/analysis"}}},{"node":{"id":"55ad186362124b3b227aa82758a2fdeb","name":"AnalysisThree","path":"/operation/analysis/analysis-three/","props":[{"name":"레가시 모노리식의 한계점"}],"componentDesc":{"group":["02_01_04"]},"fileInfo":{"name":"AnalysisThree","path":"operation/analysis/AnalysisThree.vue","directory":"operation/analysis"}}},{"node":{"id":"b3045280927ae8e0cf504bb6b75a8186","name":"index","path":"/operation/design/","props":[{"name":"설계"}],"componentDesc":{"group":["02_02_01"]},"fileInfo":{"name":"index","path":"operation/design/index.vue","directory":"operation/design"}}},{"node":{"id":"270ec4ccf40dc1e709c17c9c96d9eff8","name":"DesignOne","path":"/operation/design/design-one/","props":[{"name":"접근법과 분석패턴"}],"componentDesc":{"group":["02_02_02"]},"fileInfo":{"name":"DesignOne","path":"operation/design/DesignOne.vue","directory":"operation/design"}}},{"node":{"id":"789377d86c6d697aa9bdf4f827de232e","name":"DesignTwo","path":"/operation/design/design-two/","props":[{"name":"도메인 주도 설계"}],"componentDesc":{"group":["02_02_03"]},"fileInfo":{"name":"DesignTwo","path":"operation/design/DesignTwo.vue","directory":"operation/design"}}},{"node":{"id":"2f5bf9dba43a308286598c5272eb3b41","name":"DesignThree","path":"/operation/design/design-three/","props":[{"name":"이벤트스토밍"}],"componentDesc":{"group":["02_02_04"]},"fileInfo":{"name":"DesignThree","path":"operation/design/DesignThree.vue","directory":"operation/design"}}},{"node":{"id":"bcbe44345d2c0de4ca756d8650b434ff","name":"DesignFour","path":"/operation/design/design-four/","props":[{"name":"서비스 서열과 역학 관계"}],"componentDesc":{"group":["02_02_05"]},"fileInfo":{"name":"DesignFour","path":"operation/design/DesignFour.vue","directory":"operation/design"}}},{"node":{"id":"673d4bc000dcd363f903e5517424332e","name":"DesignFive","path":"/operation/design/design-five/","props":[{"name":"아키텍처 설계"}],"componentDesc":{"group":["02_02_06"]},"fileInfo":{"name":"DesignFive","path":"operation/design/DesignFive.vue","directory":"operation/design"}}},{"node":{"id":"4943de4cd0d33692b7ac5a5793a04db7","name":"DesignSix","path":"/operation/design/design-six/","props":[{"name":"서비스 디스커버리 패턴"}],"componentDesc":{"group":["02_02_07"]},"fileInfo":{"name":"DesignSix","path":"operation/design/DesignSix.vue","directory":"operation/design"}}},{"node":{"id":"0bbcb5e3d2dc70aac2e7d7a763bb15a4","name":"DesignSeven","path":"/operation/design/design-seven/","props":[{"name":"마이크로서비스 보안설계"}],"componentDesc":{"group":["02_02_08_true"]},"fileInfo":{"name":"DesignSeven","path":"operation/design/DesignSeven.vue","directory":"operation/design"}}},{"node":{"id":"3d43d4a5a43e52ed8633068c213e388f","name":"DesignEight","path":"/operation/design/design-eight/","props":[{"name":"프론트엔드 설계"}],"componentDesc":{"group":["02_02_09"]},"fileInfo":{"name":"DesignEight","path":"operation/design/DesignEight.vue","directory":"operation/design"}}},{"node":{"id":"9a00152504682fe0b52ef12695f5cafb","name":"index","path":"/operation/implementation/","props":[{"name":"구현"}],"componentDesc":{"group":["02_03_01"]},"fileInfo":{"name":"index","path":"operation/implementation/index.vue","directory":"operation/implementation"}}},{"node":{"id":"db72bb9b9222c03aab2c53913ad6d3ec","name":"ImplementationTwo","path":"/operation/implementation/implementation-two/","props":[{"name":"CNA 구현 프레임워크"}],"componentDesc":{"group":["02_03_03"]},"fileInfo":{"name":"ImplementationTwo","path":"operation/implementation/ImplementationTwo.vue","directory":"operation/implementation"}}},{"node":{"id":"7168adf0de6f36e4f3788e9f4b03b281","name":"ImplementationThree","path":"/operation/implementation/implementation-three/","props":[{"name":"일반적인 CNA 구현"}],"componentDesc":{"group":["02_03_04"]},"fileInfo":{"name":"ImplementationThree","path":"operation/implementation/ImplementationThree.vue","directory":"operation/implementation"}}},{"node":{"id":"99c310a8997fa02fb6a6ff3a0c0cbf9f","name":"ImplementationFour","path":"/operation/implementation/implementation-four/","props":[{"name":"MSA 기반 CNA구현"}],"componentDesc":{"group":["02_03_05_true"]},"fileInfo":{"name":"ImplementationFour","path":"operation/implementation/ImplementationFour.vue","directory":"operation/implementation"}}},{"node":{"id":"e0dd85f3f0800457d12a15a27dd27872","name":"ImplementationFive","path":"/operation/implementation/implementation-five/","props":[{"name":"모노리스 to MSA전환"}],"componentDesc":{"group":["02_03_06_true"]},"fileInfo":{"name":"ImplementationFive","path":"operation/implementation/ImplementationFive.vue","directory":"operation/implementation"}}},{"node":{"id":"92a6c0c121b1ee1a93616e4f1fd42fc1","name":"ImplementationSix","path":"/operation/implementation/implementation-six/","props":[{"name":"게이트웨이(Gateway)"}],"componentDesc":{"group":["02_03_07_true"]},"fileInfo":{"name":"ImplementationSix","path":"operation/implementation/ImplementationSix.vue","directory":"operation/implementation"}}},{"node":{"id":"00db06f13914184e971bf2a5f572d31d","name":"ImplementationSeven","path":"/operation/implementation/implementation-seven/","props":[{"name":"이벤트기반 메세지채널"}],"componentDesc":{"group":["02_03_08_true"]},"fileInfo":{"name":"ImplementationSeven","path":"operation/implementation/ImplementationSeven.vue","directory":"operation/implementation"}}},{"node":{"id":"9c5ea9660d1a6a39b6d078ffa26382ec","name":"index","path":"/operation/integration/","props":[{"name":"통합"}],"componentDesc":{"group":["02_04_01"]},"fileInfo":{"name":"index","path":"operation/integration/index.vue","directory":"operation/integration"}}},{"node":{"id":"c4ed0141ae1c47b0352238c03f61d39c","name":"IntegrationOne","path":"/operation/integration/integration-one/","props":[{"name":"Front-End에서의 통합"}],"componentDesc":{"group":["02_04_02_true"]},"fileInfo":{"name":"IntegrationOne","path":"operation/integration/IntegrationOne.vue","directory":"operation/integration"}}},{"node":{"id":"22481c689efeb7cce5028d8ff28a0ec7","name":"IntegrationTwo","path":"/operation/integration/integration-two/","props":[{"name":"동기호출에 의한 통합"}],"componentDesc":{"group":["02_04_03_true"]},"fileInfo":{"name":"IntegrationTwo","path":"operation/integration/IntegrationTwo.vue","directory":"operation/integration"}}},{"node":{"id":"029ee6dac2300fb205e7d078aa96a2a4","name":"IntegrationThree","path":"/operation/integration/integration-three/","props":[{"name":"Event-driven 기반 통합"}],"componentDesc":{"group":["02_04_04_true"]},"fileInfo":{"name":"IntegrationThree","path":"operation/integration/IntegrationThree.vue","directory":"operation/integration"}}},{"node":{"id":"54361b064ea74579ab02dd3460219dbc","name":"IntegrationFour","path":"/operation/integration/integration-four/","props":[{"name":"이벤추얼 트랜잭션"}],"componentDesc":{"group":["02_04_05_true"]},"fileInfo":{"name":"IntegrationFour","path":"operation/integration/IntegrationFour.vue","directory":"operation/integration"}}},{"node":{"id":"55cd3fb103352c8ee105645ab5648acd","name":"IntegrationFive","path":"/operation/integration/integration-five/","props":[{"name":"데이터 프로젝션"}],"componentDesc":{"group":["02_04_06_true"]},"fileInfo":{"name":"IntegrationFive","path":"operation/integration/IntegrationFive.vue","directory":"operation/integration"}}},{"node":{"id":"d627ab6a66863e09e36917e0bf5f9acc","name":"IntegrationSix","path":"/operation/integration/integration-six/","props":[{"name":"CQRS"}],"componentDesc":{"group":["02_04_07_true"]},"fileInfo":{"name":"IntegrationSix","path":"operation/integration/IntegrationSix.vue","directory":"operation/integration"}}},{"node":{"id":"d004830e9a3396a86148ac93ba93067d","name":"index","path":"/operation/deployment/","props":[{"name":"배포"}],"componentDesc":{"group":["02_05_01"]},"fileInfo":{"name":"index","path":"operation/deployment/index.vue","directory":"operation/deployment"}}},{"node":{"id":"60dd52ca534ffc28331aa0469feb1078","name":"DeploymentOne","path":"/operation/deployment/deployment-one/","props":[{"name":"지속적인 통합"}],"componentDesc":{"group":["02_05_02"]},"fileInfo":{"name":"DeploymentOne","path":"operation/deployment/DeploymentOne.vue","directory":"operation/deployment"}}},{"node":{"id":"ad3baccf5129e46812ae66168adc453b","name":"DeploymentTwo","path":"/operation/deployment/deployment-two/","props":[{"name":"파이프라인(Pipeline)"}],"componentDesc":{"group":["02_05_03"]},"fileInfo":{"name":"DeploymentTwo","path":"operation/deployment/DeploymentTwo.vue","directory":"operation/deployment"}}},{"node":{"id":"142edcff7ccf964761573fd5ca2cfd8f","name":"DeploymentThree","path":"/operation/deployment/deployment-three/","props":[{"name":"배포 전략"}],"componentDesc":{"group":["02_05_04"]},"fileInfo":{"name":"DeploymentThree","path":"operation/deployment/DeploymentThree.vue","directory":"operation/deployment"}}},{"node":{"id":"2d9b4e2a775940561e31d49708966c5c","name":"DeploymentFour","path":"/operation/deployment/deployment-four/","props":[{"name":"실습 스크립트"}],"componentDesc":{"group":["02_05_05"]},"fileInfo":{"name":"DeploymentFour","path":"operation/deployment/DeploymentFour.vue","directory":"operation/deployment"}}},{"node":{"id":"62d2b791c505db135c451e18d33709b7","name":"index","path":"/operation/operation/","props":[{"name":"운영"}],"componentDesc":{"group":["02_06_01"]},"fileInfo":{"name":"index","path":"operation/operation/index.vue","directory":"operation/operation"}}},{"node":{"id":"1ea3e5b5c41b7eee752b75a920be869e","name":"OperationOne","path":"/operation/operation/operation-one/","props":[{"name":"도커 이미지"}],"componentDesc":{"group":["02_06_02_true"]},"fileInfo":{"name":"OperationOne","path":"operation/operation/OperationOne.vue","directory":"operation/operation"}}},{"node":{"id":"9830708d55033129de4ce3da2269117b","name":"OperationTwo","path":"/operation/operation/operation-two/","props":[{"name":"Kubernetes 오브젝트 모델"}],"componentDesc":{"group":["02_06_03_true"]},"fileInfo":{"name":"OperationTwo","path":"operation/operation/OperationTwo.vue","directory":"operation/operation"}}},{"node":{"id":"28ddc0f3e8f1a17eedc552bda962e1ce","name":"OperationThree","path":"/operation/operation/operation-three/","props":[{"name":"Kubernetes Advanced 객체"}],"componentDesc":{"group":["02_06_04_true"]},"fileInfo":{"name":"OperationThree","path":"operation/operation/OperationThree.vue","directory":"operation/operation"}}},{"node":{"id":"b73d046c8a3e5975444bc9cbb8c9c6c5","name":"OperationFour","path":"/operation/operation/operation-four/","props":[{"name":"Kubernetes 아키텍처"}],"componentDesc":{"group":["02_06_05"]},"fileInfo":{"name":"OperationFour","path":"operation/operation/OperationFour.vue","directory":"operation/operation"}}},{"node":{"id":"14a67359a13418e0ecd58a3ea5f260f0","name":"OperationFive","path":"/operation/operation/operation-five/","props":[{"name":"서비스메시 이스티오"}],"componentDesc":{"group":["02_06_06_true"]},"fileInfo":{"name":"OperationFive","path":"operation/operation/OperationFive.vue","directory":"operation/operation"}}},{"node":{"id":"3b3b009d602e92db8126837a8efc142a","name":"OperationSix","path":"/operation/operation/operation-six/","props":[{"name":"마이크로서비스 모니터링"}],"componentDesc":{"group":["02_06_07"]},"fileInfo":{"name":"OperationSix","path":"operation/operation/OperationSix.vue","directory":"operation/operation"}}},{"node":{"id":"5c06e321ca41d128e382dab6d9a638d9","name":"OperationSeven","path":"/operation/operation/operation-seven/","props":[{"name":"실습 스크립트"}],"componentDesc":{"group":["02_06_08"]},"fileInfo":{"name":"OperationSeven","path":"operation/operation/OperationSeven.vue","directory":"operation/operation"}}},{"node":{"id":"25ca4ee4860c9eaf2fe36eabfbf0f801","name":"index","path":"/operation/strategy/","props":[{"name":"MSA 전환전략"}],"componentDesc":{"group":["03_03_01"]},"fileInfo":{"name":"index","path":"operation/strategy/index.vue","directory":"operation/strategy"}}},{"node":{"id":"a230a80a79395cae698245283c0fb291","name":"index","path":"/operation/tool/","props":[{"name":"MSA 도구"}],"componentDesc":{"group":["03_03_01"]},"fileInfo":{"name":"index","path":"operation/tool/index.vue","directory":"operation/tool"}}},{"node":{"id":"0e249d589e16bc471699a0997ecdd45f","name":"StrategyOne","path":"/operation/strategy/strategy-one/","props":[{"name":"전환대상 식별"}],"componentDesc":{"group":["03_03_02"]},"fileInfo":{"name":"StrategyOne","path":"operation/strategy/StrategyOne.vue","directory":"operation/strategy"}}},{"node":{"id":"f1b1512436cac9177b5833837340236c","name":"ToolOne","path":"/operation/tool/tool-one/","props":[{"name":"이벤트스토밍 도구"}],"componentDesc":{"group":["03_03_02"]},"fileInfo":{"name":"ToolOne","path":"operation/tool/ToolOne.vue","directory":"operation/tool"}}},{"node":{"id":"29626e3d5c95d1695bad3ce0efded855","name":"StrategyTwo","path":"/operation/strategy/strategy-two/","props":[{"name":"전환방식 선정"}],"componentDesc":{"group":["03_03_03"]},"fileInfo":{"name":"StrategyTwo","path":"operation/strategy/StrategyTwo.vue","directory":"operation/strategy"}}},{"node":{"id":"3e91eb7a68e1a730ef545d3707178a51","name":"ToolTwo","path":"/operation/tool/tool-two/","props":[{"name":"폴리글랏 템플릿 설계"}],"componentDesc":{"group":["03_03_03"]},"fileInfo":{"name":"ToolTwo","path":"operation/tool/ToolTwo.vue","directory":"operation/tool"}}},{"node":{"id":"b55809487159a889471dd30830a3af3e","name":"StrategyThree","path":"/operation/strategy/strategy-three/","props":[{"name":"전환이슈 및 솔루션"}],"componentDesc":{"group":["03_03_04"]},"fileInfo":{"name":"StrategyThree","path":"operation/strategy/StrategyThree.vue","directory":"operation/strategy"}}},{"node":{"id":"29289d69a5592ecb507e8e66853aace1","name":"ToolThree","path":"/operation/tool/tool-three/","props":[{"name":"배포 다이어그래밍 도구"}],"componentDesc":{"group":["03_03_04"]},"fileInfo":{"name":"ToolThree","path":"operation/tool/ToolThree.vue","directory":"operation/tool"}}},{"node":{"id":"94921cb006bea2755aea4573013ca4c6","name":"ArchitectureOne","path":"/operation/architecture/architecture-one/","props":[{"name":"API Gateway"}],"componentDesc":{"group":["03_04_01"]},"fileInfo":{"name":"ArchitectureOne","path":"operation/architecture/ArchitectureOne.vue","directory":"operation/architecture"}}},{"node":{"id":"30d9ec34c3419949e4a9984171397490","name":"index","path":"/operation/architecture/","props":[{"name":"MSA 아우터 아키텍처"}],"componentDesc":{"group":["03_04_01"]},"fileInfo":{"name":"index","path":"operation/architecture/index.vue","directory":"operation/architecture"}}},{"node":{"id":"f464ed6c267c40cf0cab85ce2b5a8590","name":"ArchitectureTwo","path":"/operation/architecture/architecture-two/","props":[{"name":"Service Mesh"}],"componentDesc":{"group":["03_04_03"]},"fileInfo":{"name":"ArchitectureTwo","path":"operation/architecture/ArchitectureTwo.vue","directory":"operation/architecture"}}},{"node":{"id":"df1d6a6d4a1b189a603685090751c6a0","name":"ArchitectureThree","path":"/operation/architecture/architecture-three/","props":[{"name":"Container Management"}],"componentDesc":{"group":["03_04_04"]},"fileInfo":{"name":"ArchitectureThree","path":"operation/architecture/ArchitectureThree.vue","directory":"operation/architecture"}}},{"node":{"id":"734984ce5c5950ba9e16783b98bebeea","name":"ArchitectureFour","path":"/operation/architecture/architecture-four/","props":[{"name":"Backing Service"}],"componentDesc":{"group":["03_04_05"]},"fileInfo":{"name":"ArchitectureFour","path":"operation/architecture/ArchitectureFour.vue","directory":"operation/architecture"}}},{"node":{"id":"2211e709073628a55b69f768e31cb366","name":"ArchitectureFive","path":"/operation/architecture/architecture-five/","props":[{"name":"Telemetry"}],"componentDesc":{"group":["03_04_06"]},"fileInfo":{"name":"ArchitectureFive","path":"operation/architecture/ArchitectureFive.vue","directory":"operation/architecture"}}}]},"allPages":{"edges":[{"node":{"name":"OperationSeven","path":"/operation/operation/operation-seven/","fileInfo":{"name":"OperationSeven","directory":"operation/operation"}}},{"node":{"name":"ToolThree","path":"/operation/tool/tool-three/","fileInfo":{"name":"ToolThree","directory":"operation/tool"}}},{"node":{"name":"ToolTwo","path":"/operation/tool/tool-two/","fileInfo":{"name":"ToolTwo","directory":"operation/tool"}}},{"node":{"name":"ToolOne","path":"/operation/tool/tool-one/","fileInfo":{"name":"ToolOne","directory":"operation/tool"}}},{"node":{"name":"StrategyThree","path":"/operation/strategy/strategy-three/","fileInfo":{"name":"StrategyThree","directory":"operation/strategy"}}},{"node":{"name":"index","path":"/operation/tool/","fileInfo":{"name":"index","directory":"operation/tool"}}},{"node":{"name":"StrategyOne","path":"/operation/strategy/strategy-one/","fileInfo":{"name":"StrategyOne","directory":"operation/strategy"}}},{"node":{"name":"StrategyTwo","path":"/operation/strategy/strategy-two/","fileInfo":{"name":"StrategyTwo","directory":"operation/strategy"}}},{"node":{"name":"index","path":"/operation/strategy/","fileInfo":{"name":"index","directory":"operation/strategy"}}},{"node":{"name":"StepByStepGoal","path":"/operation/planning/step-by-step-goal/","fileInfo":{"name":"StepByStepGoal","directory":"operation/planning"}}},{"node":{"name":"TestMeasures","path":"/operation/planning/test-measures/","fileInfo":{"name":"TestMeasures","directory":"operation/planning"}}},{"node":{"name":"Planning","path":"/operation/planning/planning/","fileInfo":{"name":"Planning","directory":"operation/planning"}}},{"node":{"name":"SystemSecurity","path":"/operation/planning/system-security/","fileInfo":{"name":"SystemSecurity","directory":"operation/planning"}}},{"node":{"name":"SegmentationLevel","path":"/operation/planning/segmentation-level/","fileInfo":{"name":"SegmentationLevel","directory":"operation/planning"}}},{"node":{"name":"OperationTwo","path":"/operation/operation/operation-two/","fileInfo":{"name":"OperationTwo","directory":"operation/operation"}}},{"node":{"name":"index","path":"/operation/planning/","fileInfo":{"name":"index","directory":"operation/planning"}}},{"node":{"name":"PerformanceMeasures","path":"/operation/planning/performance-measures/","fileInfo":{"name":"PerformanceMeasures","directory":"operation/planning"}}},{"node":{"name":"CloudIq","path":"/operation/planning/cloud-iq/","fileInfo":{"name":"CloudIq","directory":"operation/planning"}}},{"node":{"name":"CourseInfo","path":"/operation/introduction/schedule/","fileInfo":{"name":"schedule","directory":"operation/introduction"}}},{"node":{"name":"AvatarPatten","path":"/operation/planning/avatar-patten/","fileInfo":{"name":"AvatarPatten","directory":"operation/planning"}}},{"node":{"name":"one-point-lesson","path":"/operation/introduction/one-point-lesson/","fileInfo":{"name":"OnePointLesson","directory":"operation/introduction"}}},{"node":{"name":"OperationFour","path":"/operation/operation/operation-four/","fileInfo":{"name":"OperationFour","directory":"operation/operation"}}},{"node":{"name":"OperationThree","path":"/operation/operation/operation-three/","fileInfo":{"name":"OperationThree","directory":"operation/operation"}}},{"node":{"name":"OperationSix","path":"/operation/operation/operation-six/","fileInfo":{"name":"OperationSix","directory":"operation/operation"}}},{"node":{"name":"standard-cna","path":"/operation/introduction/standard-cna/","fileInfo":{"name":"StandardCNA","directory":"operation/introduction"}}},{"node":{"name":"OperationOne","path":"/operation/operation/operation-one/","fileInfo":{"name":"OperationOne","directory":"operation/operation"}}},{"node":{"name":"index","path":"/operation/operation/","fileInfo":{"name":"index","directory":"operation/operation"}}},{"node":{"name":"quick-understanding-cna","path":"/operation/introduction/quick-understanding-cna/","fileInfo":{"name":"QuickUnderstandingCNA","directory":"operation/introduction"}}},{"node":{"name":"OperationFive","path":"/operation/operation/operation-five/","fileInfo":{"name":"OperationFive","directory":"operation/operation"}}},{"node":{"name":"enterprise-full-day14-days-course","path":"/operation/introduction/enterprise-full-day14-days-course/","fileInfo":{"name":"EnterpriseFull-day14DaysCourse","directory":"operation/introduction"}}},{"node":{"name":"IntegrationThree","path":"/operation/integration/integration-three/","fileInfo":{"name":"IntegrationThree","directory":"operation/integration"}}},{"node":{"name":"flipped-learning4-days-cna-course","path":"/operation/introduction/flipped-learning4-days-cna-course/","fileInfo":{"name":"FlippedLearning4DaysCNACourse","directory":"operation/introduction"}}},{"node":{"name":"fundamental","path":"/operation/introduction/fundamental/","fileInfo":{"name":"Fundamental","directory":"operation/introduction"}}},{"node":{"name":"index","path":"/operation/introduction/","fileInfo":{"name":"index","directory":"operation/introduction"}}},{"node":{"name":"curriculum","path":"/operation/introduction/curriculum/","fileInfo":{"name":"Curriculum","directory":"operation/introduction"}}},{"node":{"name":"advanced","path":"/operation/introduction/advanced/","fileInfo":{"name":"Advanced","directory":"operation/introduction"}}},{"node":{"name":"ai-curriculum","path":"/operation/introduction/ai-curriculum/","fileInfo":{"name":"AI-Curriculum","directory":"operation/introduction"}}},{"node":{"name":"IntegrationSix","path":"/operation/integration/integration-six/","fileInfo":{"name":"IntegrationSix","directory":"operation/integration"}}},{"node":{"name":"IntegrationTwo","path":"/operation/integration/integration-two/","fileInfo":{"name":"IntegrationTwo","directory":"operation/integration"}}},{"node":{"name":"IntegrationFour","path":"/operation/integration/integration-four/","fileInfo":{"name":"IntegrationFour","directory":"operation/integration"}}},{"node":{"name":"index","path":"/operation/implementation/","fileInfo":{"name":"index","directory":"operation/implementation"}}},{"node":{"name":"IntegrationFive","path":"/operation/integration/integration-five/","fileInfo":{"name":"IntegrationFive","directory":"operation/integration"}}},{"node":{"name":"IntegrationOne","path":"/operation/integration/integration-one/","fileInfo":{"name":"IntegrationOne","directory":"operation/integration"}}},{"node":{"name":"ImplementationTwo","path":"/operation/implementation/implementation-two/","fileInfo":{"name":"ImplementationTwo","directory":"operation/implementation"}}},{"node":{"name":"ImplementationThree","path":"/operation/implementation/implementation-three/","fileInfo":{"name":"ImplementationThree","directory":"operation/implementation"}}},{"node":{"name":"index","path":"/operation/integration/","fileInfo":{"name":"index","directory":"operation/integration"}}},{"node":{"name":"ImplementationSeven","path":"/operation/implementation/implementation-seven/","fileInfo":{"name":"ImplementationSeven","directory":"operation/implementation"}}},{"node":{"name":"ImplementationSix","path":"/operation/implementation/implementation-six/","fileInfo":{"name":"ImplementationSix","directory":"operation/implementation"}}},{"node":{"name":"ImplementationFive","path":"/operation/implementation/implementation-five/","fileInfo":{"name":"ImplementationFive","directory":"operation/implementation"}}},{"node":{"name":"ImplementationFour","path":"/operation/implementation/implementation-four/","fileInfo":{"name":"ImplementationFour","directory":"operation/implementation"}}},{"node":{"name":"index","path":"/operation/deployment/","fileInfo":{"name":"index","directory":"operation/deployment"}}},{"node":{"name":"DeploymentTwo","path":"/operation/deployment/deployment-two/","fileInfo":{"name":"DeploymentTwo","directory":"operation/deployment"}}},{"node":{"name":"DeploymentFour","path":"/operation/deployment/deployment-four/","fileInfo":{"name":"DeploymentFour","directory":"operation/deployment"}}},{"node":{"name":"DeploymentOne","path":"/operation/deployment/deployment-one/","fileInfo":{"name":"DeploymentOne","directory":"operation/deployment"}}},{"node":{"name":"index","path":"/operation/design/","fileInfo":{"name":"index","directory":"operation/design"}}},{"node":{"name":"DeploymentThree","path":"/operation/deployment/deployment-three/","fileInfo":{"name":"DeploymentThree","directory":"operation/deployment"}}},{"node":{"name":"DesignOne","path":"/operation/design/design-one/","fileInfo":{"name":"DesignOne","directory":"operation/design"}}},{"node":{"name":"DesignThree","path":"/operation/design/design-three/","fileInfo":{"name":"DesignThree","directory":"operation/design"}}},{"node":{"name":"DesignTwo","path":"/operation/design/design-two/","fileInfo":{"name":"DesignTwo","directory":"operation/design"}}},{"node":{"name":"DesignFive","path":"/operation/design/design-five/","fileInfo":{"name":"DesignFive","directory":"operation/design"}}},{"node":{"name":"DesignSix","path":"/operation/design/design-six/","fileInfo":{"name":"DesignSix","directory":"operation/design"}}},{"node":{"name":"DesignSeven","path":"/operation/design/design-seven/","fileInfo":{"name":"DesignSeven","directory":"operation/design"}}},{"node":{"name":"DesignEight","path":"/operation/design/design-eight/","fileInfo":{"name":"DesignEight","directory":"operation/design"}}},{"node":{"name":"ArchitectureThree","path":"/operation/architecture/architecture-three/","fileInfo":{"name":"ArchitectureThree","directory":"operation/architecture"}}},{"node":{"name":"DesignFour","path":"/operation/design/design-four/","fileInfo":{"name":"DesignFour","directory":"operation/design"}}},{"node":{"name":"index","path":"/operation/architecture/","fileInfo":{"name":"index","directory":"operation/architecture"}}},{"node":{"name":"ArchitectureFour","path":"/operation/architecture/architecture-four/","fileInfo":{"name":"ArchitectureFour","directory":"operation/architecture"}}},{"node":{"name":"ArchitectureTwo","path":"/operation/architecture/architecture-two/","fileInfo":{"name":"ArchitectureTwo","directory":"operation/architecture"}}},{"node":{"name":"AnalysisThree","path":"/operation/analysis/analysis-three/","fileInfo":{"name":"AnalysisThree","directory":"operation/analysis"}}},{"node":{"name":"ArchitectureOne","path":"/operation/architecture/architecture-one/","fileInfo":{"name":"ArchitectureOne","directory":"operation/architecture"}}},{"node":{"name":"index","path":"/operation/analysis/","fileInfo":{"name":"index","directory":"operation/analysis"}}},{"node":{"name":"AnalysisTwo","path":"/operation/analysis/analysis-two/","fileInfo":{"name":"AnalysisTwo","directory":"operation/analysis"}}},{"node":{"name":"ArchitectureFive","path":"/operation/architecture/architecture-five/","fileInfo":{"name":"ArchitectureFive","directory":"operation/architecture"}}},{"node":{"name":"AnalysisOne","path":"/operation/analysis/analysis-one/","fileInfo":{"name":"AnalysisOne","directory":"operation/analysis"}}}]}},"context":{"pathRegexp":"^$path.+$"}}